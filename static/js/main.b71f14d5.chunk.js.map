{"version":3,"sources":["services/base.service.js","utils/urls.js","components/summary.js","components/continentTabs.js","components/detailList.js","components/worldComponent.js","components/header.js","components/footer.js","components/contibutor.js","components/navbarComponent.js","utils/constants.js","components/stateList.js","components/logsComponent.js","components/countryComponent.js","components/districtComponent.js","components/notification.js","App.js","serviceWorker.js","index.js","corona-virus.png"],"names":["Service","getInstance","axios","create","responseType","headers","GET_COUNTRY_DATA","countryName","GET_INDIA_DATA","GET_LATEST_LOGS","Summary","props","summaryData","isCountryData","className","CardDeck","Card","Body","Img","variant","src","countryInfo","flag","Title","country","continent","Text","cases","deaths","recovered","active","ContinentTabs","continentsArray","onContinentSelect","Tabs","defaultActiveKey","transition","id","onSelect","e","map","index","Tab","eventKey","title","key","DetailList","details","type","isContinentSelected","Table","responsive","striped","bordered","hover","detail","to","todayCases","todayDeaths","critical","WorldComponent","state","worldData","countriesData","continentData","continentSelected","componentDidMount","a","get","worldRes","countryRes","continentRes","setState","data","console","log","message","renderDetails","length","Spinner","animation","_","val","unshift","continentSummaryData","updatedSummaryData","findIndex","v","selectedContinent","countries","this","Component","Header","Corona","alt","style","width","Footer","Date","getFullYear","Contibutor","name","url","d","href","target","rel","NavbarComponent","path","Navbar","bg","Brand","Nav","StateCodeToNameMapping","StateList","indiaData","stateArray","Object","entries","stateCode","stateData","push","total","districts","delta","confirmed","deceased","tested","migrated","meta","last_updated","Math","floor","abs","renderStateList","LogsComponent","logs","timestamp","toDateString","update","CountryComponent","countryData","isIndia","isLogVisble","logsData","match","params","history","indiaRes","slice","Button","onClick","DistrictComponent","renderDistrictList","districtArray","districtName","districtData","district","Notification","value","isVisible","hideToaster","i","aria-live","aria-atomic","position","minHeight","top","right","Toast","onClose","show","App","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.b71f14d5.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst axiosInstance = axios.create({\n    responseType: 'json',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nconst Service = {\n    getInstance: axiosInstance\n}\n\nexport default Service;","export const GET_WORLD_DATA = `https://disease.sh/v2/all`;\nexport const GET_ALL_CONTINENT_DATA = `https://disease.sh/v2/continents`;\nexport const GET_CONTINENT_DATA = (continentName) => `https://disease.sh/v2/continents/${continentName}`;\nexport const GET_ALL_COUNTRIES_DATA = `https://disease.sh/v2/countries`;\nexport const GET_COUNTRY_DATA = (countryName) => `https://disease.sh/v2/countries/${countryName}`;\n// export const GET_TIME_SERIES_DATA = `https://api.covid19india.org/v3/min/timeseries.min.json`;\nexport const GET_INDIA_DATA = `https://api.covid19india.org/v3/min/data.min.json`;\nexport const GET_LATEST_LOGS = `https://api.covid19india.org/updatelog/log.json`;\n// export const GET_HISTORICAL_DATA = (date) => `https://api.covid19india.org/v3/min/data-2020-05-30.min.json`","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\n\nconst Summary = (props) => {\n    const { summaryData, isCountryData } = props;\n\n    return (\n        <div className=\"container\">\n            <CardDeck>\n                {isCountryData ?\n                    <Card>\n                        <Card.Body>\n                            <Card.Img variant=\"top\" src={summaryData.countryInfo.flag} />\n                            <Card.Title>{summaryData.country} ({summaryData.continent})</Card.Title>\n                        </Card.Body>\n                    </Card>\n                    : \"\"}\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Total Cases:</Card.Title>\n                        <Card.Text>\n                            {summaryData.cases}\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Total Deaths:</Card.Title>\n                        <Card.Text>\n                            {summaryData.deaths}\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </CardDeck>\n            <CardDeck>\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Total Recovered:</Card.Title>\n                        <Card.Text>\n                            {summaryData.recovered}\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Active Cases:</Card.Title>\n                        <Card.Text>\n                            {summaryData.active}\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Closed Cases:</Card.Title>\n                        <Card.Text>\n                            {summaryData.recovered + summaryData.deaths}\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </CardDeck>\n        </div>\n    )\n}\n\nexport default Summary;\n","import React from 'react';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nconst ContinentTabs = (props) => {\n    const { continentsArray, onContinentSelect } = props;\n    return (\n        <div className=\"container\">\n            <Tabs defaultActiveKey={continentsArray[0]} transition={false}\n                id=\"noanim-tab-example\" onSelect={(e) => onContinentSelect(e)}>\n                {continentsArray.map((continent, index) => (\n                    <Tab eventKey={continent} title={continent} key={index}>\n                    </Tab>\n                ))}\n            </Tabs>\n        </div>\n    )\n}\nexport default ContinentTabs;","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { Link } from 'react-router-dom';\n\nconst DetailList = (props) => {\n    const { details, type, isContinentSelected } = props;\n    return (\n        <div>\n            <Table responsive striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>{isContinentSelected ? 'Continent' : 'Country'}</th>\n                        <th>Total Cases</th>\n                        <th>New Cases</th>\n                        <th>Total Death</th>\n                        <th>New Death</th>\n                        <th>Total Recovered</th>\n                        <th>Active Cases</th>\n                        <th>Serious/Critical</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {details.map((detail, index) => (\n                        <tr key={index}>\n                            <td>{index === 0 ? '' : index}</td>\n                            <td>{index === 0 ? type :\n                                <Link to={`/country/${detail.country}`}>{detail.country}</Link>}</td>\n                            <td>{detail.cases}</td>\n                            <td>+{detail.todayCases}</td>\n                            <td>{detail.deaths}</td>\n                            <td>+{detail.todayDeaths}</td>\n                            <td>{detail.recovered}</td>\n                            <td>{detail.active}</td>\n                            <td>{detail.critical}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n\nexport default DetailList;","import React, { Component } from 'react'\nimport Service from '../services/base.service';\nimport { GET_WORLD_DATA, GET_ALL_COUNTRIES_DATA, GET_ALL_CONTINENT_DATA } from '../utils/urls';\nimport * as _ from 'lodash';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Summary from './summary';\nimport ContinentTabs from './continentTabs';\nimport DetailList from './detailList';\n\nclass WorldComponent extends Component {\n    state = {\n        worldData: {},\n        countriesData: [],\n        continentData: [],\n        isContinentSelected: false,\n        continentSelected: 'ALL'\n    }\n\n    componentDidMount = async () => {\n        try {\n            const worldRes = await Service.getInstance.get(GET_WORLD_DATA);\n            const countryRes = await Service.getInstance.get(GET_ALL_COUNTRIES_DATA);\n            const continentRes = await Service.getInstance.get(GET_ALL_CONTINENT_DATA);\n\n            this.setState({\n                countriesData: countryRes.data,\n                worldData: worldRes.data,\n                continentData: continentRes.data\n            })\n\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n\n    onContinentSelect = (e) => {\n        this.setState({\n            isContinentSelected: e !== 'ALL',\n            continentSelected: e\n        }, () => {\n            this.renderDetails()\n        })\n    }\n\n    renderDetails = () => {\n        const { countriesData, worldData, continentData, isContinentSelected, continentSelected } = this.state;\n\n        if (countriesData.length === 0) {\n            return <Spinner animation=\"grow\" />\n        }\n\n        if (_.findIndex(countriesData, (val) => _.isNil(val.continent)) === -1) {\n            countriesData.unshift(worldData);\n        }\n\n        let updatedSummaryData = _.orderBy(countriesData, ['cases'], ['desc']);\n\n        let continentsArray = _.map(continentData, (val) => val.continent);\n\n        if (continentsArray.findIndex(v => v === 'ALL') === -1) {\n            continentsArray.unshift('ALL');\n        }\n\n        let continentSummaryData;\n\n        if (isContinentSelected) {\n            const selectedContinent = _.filter(continentData, (val) => val.continent === continentSelected);\n\n            continentSummaryData = _.filter(countriesData, (val) => val.continent === continentSelected);\n            continentSummaryData = _.orderBy(continentSummaryData, ['cases'], ['desc']);\n\n            if (_.findIndex(continentSummaryData, (val) => val.continent === selectedContinent && _.isNil(val.countries)) === -1) {\n                continentSummaryData.unshift(selectedContinent[0]);\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <Summary summaryData={updatedSummaryData[0]} isCountryData={false} />\n                <ContinentTabs continentsArray={continentsArray}\n                    onContinentSelect={this.onContinentSelect} />\n                <DetailList\n                    details={isContinentSelected ? continentSummaryData : updatedSummaryData}\n                    type={isContinentSelected ? `${continentSelected}` : \"World\"}\n                    isContinentSelected={isContinentSelected} />\n            </div >\n        )\n    }\n\n    render() {\n        return (\n            this.renderDetails()\n        )\n    }\n}\nexport default WorldComponent;","import React from 'react';\nimport Corona from \"../corona-virus.png\"\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <header>\n            <div className=\"container\">\n                <Link to=\"/\">\n                    <img src={Corona} alt=\"corona\" style={{ width: '8%' }} />\n                </Link>\n                <h1>Corona Tracker</h1>\n            </div>\n        </header>\n    )\n}\nexport default Header;","import React from 'react'\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"container\">\n                <span>Inspired by Make In India &copy; {new Date().getFullYear()}</span>\n            </div>\n        </footer>\n    )\n}\nexport default Footer; ","import React from 'react'\n\nconst Contibutor = () => {\n\n    const data = [{\n        name: 'Novel COVID API',\n        url: 'https://corona.lmao.ninja/'\n    },\n    {\n        name: 'COVID19-India API',\n        url: 'https://api.covid19india.org/'\n    }]\n\n    return (\n        <div className=\"container\">\n            <h2>Powered by following API Sources: </h2>\n            <ul>\n                {data.map((d, index) => (\n                    <li key={index}>Powered By \n                        <a href={d.url} target=\"_blank\" rel=\"noopener noreferrer\">{d.name}</a>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default Contibutor;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\n\nconst NavbarComponent = () => {\n\n    const data = [{\n        name: 'World',\n        path: '/',\n    }, {\n        name: 'India',\n        path: '/country/india'\n    }]\n\n    return (\n        <div className=\"container\">\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Link to={data[0].path}>\n                    <Navbar.Brand>{data[0].name}</Navbar.Brand>\n                </Link>\n                <Nav className=\"mr-auto\">\n                    {data.map((d, index) => (\n                        <Link to={d.path} key={index}>{d.name}</Link>\n                    ))}\n                </Nav>\n            </Navbar>\n\n        </div>\n    )\n}\n\nexport default NavbarComponent;","export const StateCodeToNameMapping = {\n    'UN': 'State Unassigned',\n    'AN': 'Andaman and Nicobar Islands',\n    'AP': 'Andhra Pradesh',\n    'AR': 'Arunachal Pradesh',\n    'AS': 'Assam',\n    'BR': 'Bihar',\n    'CH': 'Chandigarh',\n    'CT': 'Chhattisgarh',\n    'DL': 'Delhi',\n    'DN': 'Dadra and Nagar Haveli and Daman and Diu',\n    'GA': 'Goa',\n    'GJ': 'Gujarat',\n    'HP': 'Himachal Pradesh',\n    'HR': 'Haryana',\n    'JH': 'Jharkhand',\n    'JK': 'Jammu and Kashmir',\n    'KA': 'Karnataka',\n    'KL': 'Kerala',\n    'LA': 'Ladakh',\n    'LD': 'Lakshadweep',\n    'MH': 'Maharashtra',\n    'ML': 'Meghalaya',\n    'MN': 'Manipur',\n    'MP': 'Madhya Pradesh',\n    'MZ': 'Mizoram',\n    'NL': 'Nagaland',\n    'OR': 'Odisha',\n    'PB': 'Punjab',\n    'PY': 'Puducherry',\n    'RJ': 'Rajasthan',\n    'SK': 'Sikkim',\n    'TG': 'Telangana',\n    'TN': 'Tamil Nadu',\n    'TR': 'Tripura',\n    'UP': 'Uttar Pradesh',\n    'UT': 'Uttarakhand',\n    'WB': 'West Bengal'\n}","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { Link } from 'react-router-dom';\nimport { StateCodeToNameMapping } from '../utils/constants';\nimport * as _ from 'lodash';\n\nconst StateList = (props) => {\n    const { indiaData } = props;\n\n    const renderStateList = (indiaData) => {\n        let stateArray = [];\n\n        Object.entries(indiaData).map((val) => {\n            const stateCode = val[0];\n            const stateData = val[1];\n\n            stateData['stateCode'] = stateCode;\n            stateArray.push(stateData);\n        })\n\n        stateArray = _.filter(stateArray, val => !_.isNil(val.total));\n\n        stateArray = _.orderBy(stateArray, ['total.confirmed'], ['desc']);\n\n        return (\n            stateArray.map((detail, index) => (\n                <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td>\n                        {!_.isNil(detail.districts) ?\n                            <Link to={`/state/${detail['stateCode']}`}>\n                                {StateCodeToNameMapping[detail['stateCode']]}</Link> :\n                            StateCodeToNameMapping[detail['stateCode']]}\n                    </td>\n                    <td>\n                        <span>{!_.isNil(detail.delta) && !_.isNil(detail.delta.confirmed) ?\n                            <span>+ {detail.delta.confirmed}</span> : ''}</span>\n                        <br />\n                        {!_.isNil(detail.total.confirmed) ? detail.total.confirmed : 0}\n                    </td>\n                    <td>{!_.isNil(detail.total.confirmed) ? (detail.total.confirmed -\n                        (!_.isNil(detail.total.recovered) ? detail.total.recovered : 0) -\n                        (!_.isNil(detail.total.deceased) ? detail.total.deceased : 0)) : 0}\n                    </td>\n                    <td>\n                        <span>{!_.isNil(detail.delta) && !_.isNil(detail.delta.recovered) ?\n                            <span>+ {detail.delta.recovered}</span> : ''}</span>\n                        <br />\n                        {!_.isNil(detail.total.recovered) ? detail.total.recovered : 0}\n                    </td>\n                    <td>\n                        <span>{!_.isNil(detail.delta) && !_.isNil(detail.delta.deceased) ?\n                            <span>+ {detail.delta.deceased}</span> : ''}</span>\n                        <br />\n                        {!_.isNil(detail.total.deceased) ? detail.total.deceased : 0}\n                    </td>\n                    <td>{!_.isNil(detail.total.tested) ? detail.total.tested : 0}</td>\n                    <td>{!_.isNil(detail.total.migrated) ? detail.total.migrated : 0}</td>\n                    <td>Last Update about {!_.isNil(detail.meta) &&\n                        !_.isNil(detail.meta.last_updated) ? Math.floor(Math.abs(new Date() -\n                            new Date(detail.meta.last_updated)) / 36e5) === 0 ? 1 :\n                            Math.floor(Math.abs(new Date() -\n                                new Date(detail.meta.last_updated)) / 36e5) : 0} hours ago\n                    </td>\n                </tr>\n            ))\n        )\n    }\n\n    return (\n        <div className=\"container\">\n            <Table responsive striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>State/UT</th>\n                        <th>Confirmed</th>\n                        <th>Active</th>\n                        <th>Recovered</th>\n                        <th>Death</th>\n                        <th>Tested</th>\n                        <th>Migrated(from other states)</th>\n                        <th>Last Updated</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {renderStateList(indiaData)}\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n\nexport default StateList;","import React from 'react';\nimport Card from 'react-bootstrap/Card'\n\nconst LogsComponent = (props) => {\n\n    const { logs } = props;\n\n    return (\n        <div className=\"container\">\n            <span>{new Date(logs[0].timestamp * 1000).toDateString()}</span>\n            {logs.map((log, index) => (\n                <Card key={index}>\n                    <Card.Title>about {Math.floor(Math.abs(new Date() -\n                        new Date(log.timestamp * 1000)) / 36e5) === 0 ? 1 : Math.floor(Math.abs(new Date() -\n                            new Date(log.timestamp * 1000)) / 36e5)} hours ago</Card.Title>\n                    <Card.Body>{log.update}</Card.Body>\n                </Card>\n            ))}\n\n        </div>\n    )\n}\n\nexport default LogsComponent;","import React, { Component } from 'react';\nimport * as _ from 'lodash';\nimport Service from '../services/base.service';\nimport { GET_COUNTRY_DATA, GET_INDIA_DATA, GET_LATEST_LOGS } from '../utils/urls';\nimport Summary from './summary';\nimport StateList from './stateList';\nimport Spinner from 'react-bootstrap/Spinner';\nimport LogsComponent from './logsComponent';\nimport Button from 'react-bootstrap/Button'\n\nclass CountryComponent extends Component {\n\n    state = {\n        countryData: null,\n        isIndia: false,\n        indiaData: [],\n        isLogVisble: false,\n        logsData: []\n    }\n\n    componentDidMount = async () => {\n        try {\n            const countryName = this.props.match && this.props.match.params && this.props.match.params.name;\n\n            if (_.isEmpty(countryName) || _.isNil(countryName)) {\n                this.props.history.push('/');\n            } else {\n\n                let indiaRes;\n                let logsData;\n\n                const countryRes = await Service.getInstance.get(GET_COUNTRY_DATA(countryName));\n\n                if (_.isEqual(countryName, 'India')) {\n                    indiaRes = await Service.getInstance.get(GET_INDIA_DATA);\n                    logsData = await Service.getInstance.get(GET_LATEST_LOGS);\n\n                    logsData = _.orderBy(logsData.data, ['timestamp'], [\"desc\"])\n                }\n\n                this.setState({\n                    countryData: countryRes.data,\n                    isIndia: _.isEqual(countryName, 'India'),\n                    indiaData: _.isEqual(countryName, 'India') ? indiaRes.data : [],\n                    logsData: logsData.slice(0, 5)\n                })\n            }\n\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n\n    render() {\n\n        const { countryData, isIndia, indiaData, isLogVisble, logsData } = this.state;\n\n        if (_.isNil(countryData)) {\n            return <Spinner animation=\"grow\" />\n        }\n\n        return (\n            <div className=\"container\">\n                <Summary summaryData={countryData} isCountryData={true} />\n                {isIndia ? <Button variant=\"primary\"\n                    onClick={() => { this.setState({ isLogVisble: !isLogVisble }) }}>\n                    {isLogVisble ? 'Hide' : 'Show'} Latest Logs </Button> : ''}\n                {isIndia && isLogVisble ? <LogsComponent logs={logsData} /> : ''}\n                {isIndia ? <StateList indiaData={indiaData} /> : ''}\n            </div>\n        )\n    }\n}\n\nexport default CountryComponent;","import React, { Component } from 'react'\nimport * as _ from 'lodash';\nimport Service from '../services/base.service';\nimport { GET_INDIA_DATA } from '../utils/urls';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\n\nclass DistrictComponent extends Component {\n\n    state = {\n        stateData: null\n    }\n\n    componentDidMount = async () => {\n        try {\n            const stateCode = this.props.match && this.props.match.params && this.props.match.params.name;\n\n            if (_.isEmpty(stateCode) || _.isNil(stateCode)) {\n                this.props.history.push('/country/India');\n            } else {\n                const indiaRes = await Service.getInstance.get(GET_INDIA_DATA);\n\n                this.setState({\n                    stateData: indiaRes.data[stateCode]\n                })\n            }\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n\n    renderDistrictList = (stateData) => {\n        let districtArray = [];\n\n        Object.entries(stateData.districts).map((val) => {\n            const districtName = val[0];\n            const districtData = val[1];\n\n            districtData['districtName'] = districtName;\n            districtArray.push(districtData);\n        })\n\n        districtArray = _.orderBy(districtArray, ['total.confirmed'], ['desc']);\n\n        return (\n            districtArray.map((district, index) => (\n                <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td>\n                        {district['districtName']}\n                    </td>\n                    <td>\n                        <span>{!_.isNil(district.delta) && !_.isNil(district.delta.confirmed) ?\n                            <span>+ {district.delta.confirmed}</span> : ''}</span>\n                        <br />\n                        {!_.isNil(district.total.confirmed) ? district.total.confirmed : 0}\n                    </td>\n                    <td>{!_.isNil(district.total.confirmed) ? (district.total.confirmed -\n                        (!_.isNil(district.total.recovered) ? district.total.recovered : 0) -\n                        (!_.isNil(district.total.deceased) ? district.total.deceased : 0)) : 0}\n                    </td>\n                    <td>\n                        <span>{!_.isNil(district.delta) && !_.isNil(district.delta.recovered) ?\n                            <span>+ {district.delta.recovered}</span> : ''}</span>\n                        <br />\n                        {!_.isNil(district.total.recovered) ? district.total.recovered : 0}\n                    </td>\n                    <td>\n                        <span>{!_.isNil(district.delta) && !_.isNil(district.delta.deceased) ?\n                            <span>+ {district.delta.deceased}</span> : ''}</span>\n                        <br />\n                        {!_.isNil(district.total.deceased) ? district.total.deceased : 0}\n                    </td>\n                    <td>{!_.isNil(district.total.tested) ? district.total.tested : 0}</td>\n                    <td>{!_.isNil(district.total.migrated) ? district.total.migrated : 0}</td>\n                    <td>Last Update about {!_.isNil(stateData.meta) &&\n                        !_.isNil(stateData.meta.last_updated) ? Math.floor(Math.abs(new Date() -\n                            new Date(stateData.meta.last_updated)) / 36e5) === 0 ? 1 :\n                            Math.floor(Math.abs(new Date() -\n                                new Date(stateData.meta.last_updated)) / 36e5) : 0} hours ago\n                    </td>\n                </tr>\n            ))\n        )\n    }\n\n\n    render() {\n\n        const { stateData } = this.state;\n\n        if (_.isNil(stateData)) {\n            return <Spinner animation=\"grow\" />\n        }\n\n        return (\n            <div className=\"container\" >\n                <Table responsive striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>District</th>\n                            <th>Confirmed</th>\n                            <th>Active</th>\n                            <th>Recovered</th>\n                            <th>Death</th>\n                            <th>Tested</th>\n                            <th>Migrated(from other district)</th>\n                            <th>Last Updated</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.renderDistrictList(stateData)}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}\nexport default DistrictComponent;","import React, { Component } from 'react';\nimport Toast from 'react-bootstrap/Toast';\n\nclass Notification extends Component {\n\n    state = {\n        data: [\n            { value: \"Historical Data coming soon\", isVisible: true },\n            { value: \"Mobile App coming soon\", isVisible: true }\n        ]\n    }\n\n    hideToaster = (index) => {\n        const { data } = this.state;\n        for (var i = 0; i < data.length; i++) {\n            data[index].isVisible = false;\n        }\n\n        this.setState({\n            data\n        })\n    }\n\n    render() {\n        const { data } = this.state;\n\n        return (\n            <div className=\"container\" >\n                <div aria-live=\"polite\" aria-atomic=\"true\"\n                    style={{ position: 'relative', minHeight: '200px' }}>\n                    <div style={{ position: 'absolute', top: 0, right: 0 }}>\n                        {\n                            data.map((d, index) => (\n                                <Toast key={index} onClose={() => this.hideToaster(index)}\n                                    show={d.isVisible}>\n                                    <Toast.Header>\n                                        <strong className=\"mr-auto\">{d.value}</strong>\n                                    </Toast.Header>\n                                </Toast>\n                            ))\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Notification;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport WorldComponent from './components/worldComponent';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport Contibutor from './components/contibutor';\nimport NavbarComponent from './components/navbarComponent';\nimport CountryComponent from './components/countryComponent';\nimport DistrictComponent from './components/districtComponent';\nimport Notification from './components/notification';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Header />\n      <NavbarComponent />\n      <Contibutor />\n      <Notification />\n      <Switch>\n        <Route exact path=\"/\" component={WorldComponent}></Route>\n        <Route path=\"/country/:name\" component={CountryComponent}></Route>\n        <Route path=\"/state/:name\" component={DistrictComponent}></Route>\n        <Route path=\"**\" component={WorldComponent}></Route>\n      </Switch>\n      <Footer />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/corona-virus.28189628.png\";"],"sourceRoot":""}